#!/usr/bin/env python3
"""
Script de inicializa√ß√£o para a API PDF to Markdown Converter v2.0
"""

import os
import sys
import uvicorn
from dotenv import load_dotenv

def load_environment():
    """Carrega vari√°veis de ambiente do arquivo .env"""
    env_file = ".env"
    if os.path.exists(env_file):
        load_dotenv(env_file)
        print(f"‚úÖ Vari√°veis de ambiente carregadas de {env_file}")
    else:
        print("‚ö†Ô∏è  Arquivo .env n√£o encontrado, usando configura√ß√µes padr√£o")

def get_config():
    """Obt√©m configura√ß√µes do servidor"""
    return {
        "host": os.getenv("HOST", "0.0.0.0"),
        "port": int(os.getenv("PORT", "8000")),
        "log_level": os.getenv("LOG_LEVEL", "info"),
        "reload": os.getenv("ENVIRONMENT", "development") == "development",
        "architecture": "modular"  # Nova arquitetura sempre ativa
    }

def main():
    """Fun√ß√£o principal"""
    print("üöÄ Iniciando PDF to Markdown Converter API v2.0")
    print("=" * 60)
    print("üèóÔ∏è  Nova arquitetura modular com fallback autom√°tico")
    print("=" * 60)
    
    # Carrega vari√°veis de ambiente
    load_environment()
    
    # Obt√©m configura√ß√µes
    config = get_config()
    
    # Nova arquitetura sempre usa main.py
    app_file = "main:app"
    architecture_description = "Arquitetura Modular v2.0"
    
    print(f"üìã Configura√ß√µes:")
    print(f"   Host: {config['host']}")
    print(f"   Porta: {config['port']}")
    print(f"   Log Level: {config['log_level']}")
    print(f"   Reload: {config['reload']}")
    print(f"   Ambiente: {os.getenv('ENVIRONMENT', 'development')}")
    print(f"   Arquitetura: {architecture_description}")
    
    print("\nüîß Inicializando conversores...")
    print("üìñ Documenta√ß√£o dispon√≠vel em: http://{config['host']}:{config['port']}/docs")
    print(f"üè• Health check: http://{config['host']}:{config['port']}/health")
    print(f"üîç Status dos conversores: http://{config['host']}:{config['port']}/converters")
    
    try:
        uvicorn.run(
            app_file,
            host=config["host"],
            port=config["port"],
            reload=config["reload"],
            log_level=config["log_level"]
        )
    except KeyboardInterrupt:
        print("\n\nüëã Servidor interrompido pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro ao iniciar servidor: {e}")
        print("\nüí° Verifique se todos os arquivos est√£o presentes:")
        print("   - converters/__init__.py")
        print("   - converters/base.py")
        print("   - converters/simple.py")
        print("   - converters/docling.py")
        print("   - converters/manager.py")
        print("   - main.py")
        sys.exit(1)

if __name__ == "__main__":
    main()
